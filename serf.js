// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var EventEmitter, camelize, capitalize, debug, exec, msgpack, net, print, stream, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  exec = require('child_process').exec;

  stream = require('stream');

  net = require('net');

  debug = require('debug')('serf');

  _ = require('underscore');

  msgpack = require('msgpack');

  capitalize = function(str) {
    var k, res, v;
    if (str == null) {
      str = '';
    }
    if (_.isString(str)) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    } else if (_.isObject(str)) {
      res = {};
      for (k in str) {
        v = str[k];
        res[capitalize(k)] = v.charAt(0).match(/[a-z]/) ? capitalize(v) : v;
      }
      return res;
    } else {
      return str;
    }
  };

  camelize = function(str) {
    if (str == null) {
      str = '';
    }
    return str.trim().replace(/[-_\s]+(.)?/g, function(match, c) {
      if (c != null) {
        return c.toUpperCase();
      } else {
        return '';
      }
    });
  };

  print = function(d) {
    var error;
    if (d == null) {
      return;
    }
    if (_.isString(d)) {
      return debug(d);
    } else {
      try {
        return debug(JSON.stringify(d, null, 4));
      } catch (_error) {
        error = _error;
        return debug('circular structure!');
      }
    }
  };

  exports.Serf = (function(_super) {
    __extends(Serf, _super);

    function Serf() {
      this.send = __bind(this.send, this);
      var commands,
        _this = this;
      Serf.__super__.constructor.apply(this, arguments);
      this._seq = 0;
      this._cache = '';
      this.decoder = new msgpack.Stream(this);
      this.once('connect', function(d) {
        print('connected');
        return this.handshake({
          Version: 1
        });
      });
      this.decoder.on('msg', function(obj) {
        var Error;
        _this.emit(obj.Seq, obj);
        Error = obj.Error;
        if ((Error != null) && Error !== '') {
          _this.emit('error', Error);
        }
        return print(obj);
      });
      this.once('end', function(d) {
        return print('disconnected');
      });
      commands = ['handshake', 'event', 'force-leave', 'join', 'members', 'stream', 'monitor', 'stop', 'leave'];
      commands.forEach(function(command) {
        return _this[command] = function(body, cb) {
          return _this.send(command, body, cb);
        };
      });
    }

    Serf.prototype.send = function(Command, body, cb) {
      var Seq, header;
      if (Command == null) {
        Command = '';
      }
      Seq = this._seq++;
      header = {
        Command: Command,
        Seq: Seq
      };
      if (_.isFunction(body)) {
        cb = body;
        body = void 0;
      }
      print('header');
      print(header);
      print('body');
      print(body);
      this.write(msgpack.pack(header));
      this.write(msgpack.pack(body || {}));
      if (cb != null) {
        this.once(Seq, cb);
      }
      return this;
    };

    return Serf;

  })(net.Socket);

  exports.connect = function() {
    var args, s;
    args = net._normalizeConnectArgs(arguments);
    print('createConnection', args);
    s = new exports.Serf(args[0]);
    exports.Serf.prototype.connect.apply(s, args);
    return s;
  };

}).call(this);
