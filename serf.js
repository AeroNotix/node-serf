// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Decode, camelize, capitalize, debug, msgpack, net, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require('net');

  debug = require('debug')('serf');

  _ = require('underscore');

  msgpack = require('msgpack-js-v5-ng');

  Decode = require("" + __dirname + "/msgpack").Decode;

  capitalize = function(str) {
    var k, res, v;
    if (str == null) {
      str = '';
    }
    if (_.isString(str)) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    } else if (_.isObject(str)) {
      res = {};
      for (k in str) {
        v = str[k];
        res[capitalize(k)] = v.charAt(0).match(/[a-z]/) ? capitalize(v) : v;
      }
      return res;
    } else {
      return str;
    }
  };

  camelize = function(str) {
    if (str == null) {
      str = '';
    }
    return str.trim().replace(/[-_\s]+(.)?/g, function(match, c) {
      if (c != null) {
        return c.toUpperCase();
      } else {
        return '';
      }
    });
  };

  exports.Serf = (function(_super) {
    __extends(Serf, _super);

    function Serf() {
      this.send = __bind(this.send, this);
      var commands;
      Serf.__super__.constructor.apply(this, arguments);
      this._seq = 0;
      this._next = void 0;
      this.decoder = new Decode();
      this.pipe(this.decoder);
      this.once('connect', function(d) {
        debug('connected');
        return this.handshake({
          Version: 1
        });
      });
      this.decoder.on('data', (function(_this) {
        return function(obj) {
          debug('recieved %j', obj);
          if ((obj.Error != null) && obj.Error !== '') {
            _this.emit('error', new Error(obj.Error));
          }
          if (obj.Seq) {
            return _this._next = obj.Seq;
          } else {
            return _this.emit(_this._next, obj);
          }
        };
      })(this));
      this.once('end', function(d) {
        return debug('disconnected');
      });
      commands = ['handshake', 'event', 'force-leave', 'join', 'members', 'stream', 'monitor', 'stop', 'leave', 'tags', 'stats'];
      commands.forEach((function(_this) {
        return function(command) {
          return _this[command] = _this[camelize(command)] = function(body, cb) {
            return _this.send(command, body, cb);
          };
        };
      })(this));
    }

    Serf.prototype.send = function(Command, body, cb) {
      var Seq, header;
      if (Command == null) {
        Command = '';
      }
      Seq = this._seq++;
      header = {
        Command: Command,
        Seq: Seq
      };
      if (_.isFunction(body)) {
        cb = body;
        body = {};
      }
      debug('sending header: %j', header);
      debug('sending body: %j', body);
      this.write(msgpack.encode(header));
      if (body != null) {
        this.write(msgpack.encode(body));
      }
      if ((Command === 'stream' || Command === 'monitor') && (cb != null)) {
        this.on(Seq, cb);
      } else if (cb != null) {
        this.once(Seq, cb);
      }
      return this;
    };

    return Serf;

  })(net.Socket);

  exports.connect = function() {
    var args, s;
    args = net._normalizeConnectArgs(arguments);
    debug('create connection with args: %j', args);
    s = new exports.Serf(args[0]);
    exports.Serf.prototype.connect.apply(s, args);
    return s;
  };

}).call(this);
